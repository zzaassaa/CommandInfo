package com.draganz.commandinfo.handler;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import com.draganz.commandinfo.CommandInfo;
import com.draganz.commandinfo.Library;
import com.draganz.commandinfo.api.ICommandInfoMapping;
import com.draganz.commandinfo.api.IStringPacket;
import com.draganz.commandinfo.api.SimpleCommandInfoMapping;
import com.draganz.commandinfo.streamio.FileIO;

import net.minecraft.command.ICommand;
import net.minecraft.util.text.translation.I18n;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.fml.client.event.ConfigChangedEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import scala.actors.threadpool.Arrays;

public class ConfigHandler {

	public static Configuration config;
	
	public static File mc_info;
	
	private static final String CATEGORY_COMMAND_INFO = "general.commandinfo";
	
	private static final String MC_INFO_FILE = "mc_commandinfo_info.json";
	
	public static void init(File file){
		if(config == null){
			config = new Configuration(file);
			loadConfig();
		}
		
		if(mc_info == null){
			mc_info = new File(file.getParentFile(), MC_INFO_FILE);
		}
	}
	
	private static void loadConfig(){
		
		Library.Config.cmdInitialPermission = config.getInt(
				Library.Config.CMD_INITIAL_NAME,
				CATEGORY_COMMAND_INFO,
				Library.Config.CMD_INITIAL_DEFAULT,
				Library.Config.CMD_INITIAL_MIN,
				Library.Config.CMD_INITIAL_MAX,
				I18n.translateToLocal(Library.Config.CMD_INITIAL_COMMENT),
				Library.Config.CMD_INITIAL_LABEL);
		Library.Config.cmdInfoPermission = config.getInt(
				Library.Config.CMD_INFO_NAME,
				CATEGORY_COMMAND_INFO,
				Library.Config.CMD_INFO_DEFAULT,
				Library.Config.CMD_INFO_MIN,
				Library.Config.CMD_INFO_MAX,
				I18n.translateToLocal(Library.Config.CMD_INFO_COMMENT),
				Library.Config.CMD_INFO_LABEL);
		
		
		if(config.hasChanged()) config.save();
	}
	
	public static ICommandInfoMapping loadMapToInfoFile(ICommandInfoMapping mapping) throws FileNotFoundException{
		if(mc_info.exists()){
			SimpleCommandInfoMapping out = new SimpleCommandInfoMapping("minecraft");
			Map<String, String> data = FileIO.readMapFromFile(mc_info);
			
			for(ICommand e : mapping.getCommandInfo().keySet()){
				for(Entry<String, String> e2 : data.entrySet()){
					if(e.getName().equals(e2.getKey())){
						out.registerCommandInfo(e, e2.getValue());
					}
				}
			}
			
			return out;
		}else{
			FileIO.writeMapToFile( convertMapping(mapping.getCommandInfo()) , mc_info);
			return mapping;
		}
	}
	
	private static Map<String, String> convertMapping(Map<ICommand, IStringPacket> in){
		Map<String, String> output = new LinkedHashMap();
		
		for(Entry<ICommand, IStringPacket> out : in.entrySet()){
			output.put( out.getKey().getName(), Arrays.toString(out.getValue().getComments()) );
		}
		
		return output;
	}
	
	
	@SubscribeEvent
	public void onConfigChangeEvent(ConfigChangedEvent.OnConfigChangedEvent event){
		if(event.getModID().equalsIgnoreCase(CommandInfo.MOD_ID)){
			loadConfig();
		}
	}
}
