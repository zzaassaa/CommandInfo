package com.draganz.commandinfo.commands;

import java.util.ArrayList;
import java.util.List;

import com.draganz.commandinfo.api.CommandInfoAPI;
import com.draganz.commandinfo.api.ICmdBlock;
import com.draganz.commandinfo.library.LibConfig;
import com.draganz.commandinfo.library.LibMisc;

import net.minecraft.command.CommandBase;
import net.minecraft.command.CommandException;
import net.minecraft.command.ICommandSender;
import net.minecraft.command.WrongUsageException;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.math.BlockPos;

public class CmdInfos extends CommandBase{

	@Override
	public String getName() {
		return LibMisc.INFO;
	}
	
	@Override
	public int getRequiredPermissionLevel() {
		return LibConfig.info_threshold;
	}
	
	@Override
	public String getUsage(ICommandSender sender) {
		return LibMisc.POST_INFO;
	}
	
	@Override
	public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
		if(args.length <= 2){
			throw new WrongUsageException(LibMisc.POST_INFO);
		}else{
			for(ICmdBlock out : CommandInfoAPI.getCommandBlocks()){
				if(out.getCommand().getName().equalsIgnoreCase(args[0])){
					out.getComment();
				}
			}
		}
	}
	
	@Override
	public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args,
			BlockPos targetPos) {
		if(args.length < 2){
			return getListOfStringsMatchingLastWord(args, getCommandCalls());
		}else{
			for(CommandBase cmd : getCommands()){
				if(cmd.getName().equalsIgnoreCase(args[0]) && cmd.checkPermission(server, sender)){
					return cmd.getTabCompletions(server, sender, args, targetPos);
				}
			}
		}
		
		System.out.println("called");
		for(int i = 0; i < args.length; i++){
			System.out.println(args[0]);
		}
		return null;
	}
	
	private List<CommandBase> getCommands(){
		final List<CommandBase> cmds = new ArrayList();
		
		for(ICmdBlock out : CommandInfoAPI.getCommandBlocks()){
			if(out.getCommand() != null){
				cmds.add(out.getCommand());
			}
		}
		
		return cmds;
	}
	
	private List<String> getCommandCalls(){
		final List<String> calls = new ArrayList();
		
		for(ICmdBlock out : CommandInfoAPI.getCommandBlocks()){
			if(out.getCommand().getName().length() != 0){
				calls.add(out.getCommand().getName());
			}
		}
		
		return calls;
	}
	
}
