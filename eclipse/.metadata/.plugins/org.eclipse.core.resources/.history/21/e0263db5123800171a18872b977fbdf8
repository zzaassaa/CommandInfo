package com.draganz.commandinfo.commands;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import com.draganz.commandinfo.api.CommandInfoAPI;

import net.minecraft.command.CommandBase;
import net.minecraft.command.CommandException;
import net.minecraft.command.ICommand;
import net.minecraft.command.ICommandSender;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.math.BlockPos;

public class CmdInitial extends CommandBase{

	@Override
	public String getName() {
		return "command_info";
	}
	
	@Override
	public String getUsage(ICommandSender sender) {
		return "commands.commandinfo.base";
	}
	
	@Override
	public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
		/*if(args.length >= 1){
			System.out.println(args[0]);
			System.out.println(args[1]);
		}*/
		if(args.length >= 1){
			for(CommandBase cmd : CommandInfoAPI.getCommands()){
				if(cmd.getName().equalsIgnoreCase(args[0]) && cmd.checkPermission(server, sender)){
					cmd.execute(server, sender, args);
				}
			}
		}
	}
	
	
	/*
	 * private static List<CommandBase> commands = new ArrayList();
	private static List<String> commandCalls = new ArrayList();
	
	
	
	@Override
	public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {		
		if(args.length >= 1){
			for(CommandBase cmd : commands){
				if(cmd.getName().equalsIgnoreCase(args[0]) && cmd.checkPermission(server, sender)){
					cmd.execute(server, sender, args);
				}
			}
		}
	}
	
	@Override
	public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args,
			BlockPos targetPos) {
		if(args.length == 1){
			return getListOfStringsMatchingLastWord(args, commandCalls);
		}else if(args.length > 1){
			for(CommandBase cmd : commands){
				if(cmd.getName().equalsIgnoreCase(args[0])){
					return cmd.getTabCompletions(server, sender, args, targetPos);
				}
			}
		}
		
		return null;
	}
	
	static{
		commands.add(new CmdInfo());
				
		commandCalls.addAll(commands.stream().map(ICommand::getName).collect(Collectors.toList()));
	}
	 */
	/*

    @Override 
    public void processCommand(ICommandSender sender, String[] argString)
    { 
        World world = sender.getEntityWorld(); 
    
        if (world.isRemote) 
        { 
            System.out.println("Not processing on Client side"); 
        } 
        else 
        { 
            System.out.println("Processing on Server side"); 
            if(argString.length == 0) 
            { 
                sender.addChatMessage(new ChatComponentText("Invalid argument")); 
                return; 
            } 
    
            sender.addChatMessage(new ChatComponentText("Conjuring: [" + argString[0]  
                  + "]")); 
     
            fullEntityName = WildAnimals.MODID+"."+argString[0]; 
            if (EntityList.stringToClassMapping.containsKey(fullEntityName))
            { 
                conjuredEntity = EntityList.createEntityByName(fullEntityName, world);  
                conjuredEntity.setPosition(sender.getPlayerCoordinates().posX,       
                sender.getPlayerCoordinates().posY, 
                sender.getPlayerCoordinates().posZ); 
                world.spawnEntityInWorld(conjuredEntity); 
            } 
            else 
            { 
                sender.addChatMessage(new ChatComponentText("Entity not found")); 
            } 
        } 
    } 
	 */
}
